diff --git a/src/types/index.d.ts b/src/types/index.d.ts
index 09101eba4ff787ea17160732ed327b812e23403e..d04f599a406cb554f16d9ed846c96b2f20fe771b 100644
--- a/src/types/index.d.ts
+++ b/src/types/index.d.ts
@@ -1333,20 +1333,14 @@ declare module 'wa-sqlite/src/VFS.js' {
      * @param {number} iOffset
      * @returns {number}
      */
-    xRead(fileId: number, pData: {
-        size: number;
-        value: Uint8Array;
-    }, iOffset: number): number;
+    xRead(fileId: number, pData: Uint8Array, iOffset: number): number;
     /**
      * @param {number} fileId
      * @param {Uint8Array} pData
      * @param {number} iOffset
      * @returns {number}
      */
-    xWrite(fileId: number, pData: {
-        size: number;
-        value: Uint8Array;
-    }, iOffset: number): number;
+    xWrite(fileId: number, pData: Uint8Array, iOffset: number): number;
     /**
      * @param {number} fileId
      * @param {number} iSize
@@ -1645,3 +1639,36 @@ declare module 'wa-sqlite/src/examples/tag.js' {
    */
   export function tag(sqlite3: any, db: number): (arg0: TemplateStringsArray, ...args: any[]) => Promise<object[]>;
 }
+
+declare module 'wa-sqlite/src/examples/IDBBatchAtomicVFS.js' {
+  import * as VFS from 'wa-sqlite/src/VFS.js'
+  export type IDBBatchAtomicVFSOptions = {
+    /**
+     * @default "relaxed"
+     */
+    durability?: 'default' | 'strict' | 'relaxed'
+    /**
+     * @default "deferred"
+     */
+    purge?: 'deferred' | 'manual'
+    /**
+     * @default 16
+     */
+    purgeAtLeast?: number
+  }
+
+  export class IDBBatchAtomicVFS extends VFS.Base {
+    constructor(
+      idbDatabaseName: string,
+      options?: IDBBatchAtomicVFSOptions
+    )
+  }
+}
+declare module 'wa-sqlite/src/examples/AccessHandlePoolVFS.js' {
+  import * as VFS from 'wa-sqlite/src/VFS.js'
+
+  export class AccessHandlePoolVFS extends VFS.Base {
+    constructor(directoryPath: string)
+    isReady: Promise<void>
+  }
+}
\ No newline at end of file